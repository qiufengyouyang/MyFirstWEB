<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 为这个mapper指定一个唯一的namespace，
namespace的值习惯上设置成包名+sql映射文件名，
这样就能够保证namespace的值是唯一的
例如namespace="com.fang.mapping.customerMapper"
就是com.fang.mapping(包名)+customerMapper(customerMapper.xml文件去除后缀)
 -->
<mapper namespace="com.fang.client.customerMapper">
    <!-- 在select标签中编写查询的SQL语句， 设置select标签的id属性为getUser，id属性值必须是唯一的，不能够重复
    使用parameterType属性指明查询时使用的参数类型，resultType属性指明查询返回的结果集类型
    resultType="com.fang.entity.Customer"就表示将查询结果封装成一个Customer类的对象返回
    Customer类就是Customer表所对应的实体类
    -->
    <!-- 
        根据id查询得到一个user对象
     -->
    <select id="getCustomer" parameterType="int" 
        resultType="com.fang.entity.Customer">
        select * from customer where id=#{id}
    </select>
    <!-- 新增客户 -->
    <insert id ="addCustomer" parameterType="com.fang.entity.Customer">
    	insert into customer(name,sex,degree) values(#{name},#{sex},#{degree})
    </insert>
    <!-- 修改客户 -->
    <update id="updateCustomer" parameterType="com.fang.entity.Customer">
        update customer set name = #{name} where id = #{id}
    </update>
    <!-- 删除客户 -->
    <delete id="deleteCustomer" parameterType="int">
    	delete from customer where id = #{id}
    </delete>
    <!-- 查询全部 -->
    <select id="getAllCustomer" resultType="com.fang.entity.Customer">
    	select * from customer
    </select>
</mapper>